-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, "auto-updater")
if not status then
    local auto_update_complete = nil util.toast("Installing auto-updater...", TOAST_ALL)
    async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
        function(result, headers, status_code)
            local function parse_auto_update_result(result, headers, status_code)
                local error_prefix = "Error downloading auto-updater: "
                if status_code ~= 200 then util.toast(error_prefix..status_code, TOAST_ALL) return false end
                if not result or result == "" then util.toast(error_prefix.."Found empty file.", TOAST_ALL) return false end
                filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                if file == nil then util.toast(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                file:write(result) file:close() util.toast("Successfully installed auto-updater lib", TOAST_ALL) return true
            end
            auto_update_complete = parse_auto_update_result(result, headers, status_code)
        end, function() util.toast("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
    async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
    if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
    auto_updater = require("auto-updater")
end
if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end


local auto_updater_config = {
    source_url="https://raw.githubusercontent.com/Kizzer2003/GrabHost/main/grabhost.pluto",
    script_relpath=SCRIPT_RELPATH,
    verify_file_begins_with=nil,
    check_interval=86400,
}

auto_updater.run_auto_update(auto_updater_config)

script_version = "3.1"


util.keep_running()
util.require_natives(1681379138)

if not SCRIPT_SILENT_START then
    util.toast("GrabHost Version: "..script_version)
end

local my_root = menu.my_root()

players.add_command_hook(function(pid, root)
    if pid != players.user() and (players.get_name(pid) == "LordMcNuggie" or players.get_name(pid) == "__Kizzer__") then
        players.add_detection(pid, "GrabHost Developer", TOAST_DEFAULT, 100)
    end
end)


function kick()
    local playpos = players.get_host_queue_position(players.user())
    local player = players.user()
    local host = players.get_host()
    local hostname = players.get_name(host)
    if util.is_session_started() then
        if not util.is_session_transition_active() then
            if host != players.user() and hostname == "LordMcNuggie" or hostname == "__Kizzer__" then
                util.toast("Unfortunately, you cannot kick the developer of the script ;) - I'd recommend turning this off for now :)")
                return
            elseif host != players.user() and hostname == "KrisbySkittles" then
                util.toast("This won't work, the host is the developer's girlfriend and we can't let you hurt her - I'd recommend turning this off for now :)")
                return
            end

            if playpos == 1 then
                util.toast("Kicking the host...")
                util.yield(2000)
                
                
                -- menu.trigger_commands("kick"..hostname)
                menu.trigger_commands("orgasm"..hostname)
                menu.trigger_commands("nonhostkick"..hostname) -- These changes have been made to stop the "I will convince them to leave ;)" line from appearing from stand, just a way of eliminating unnecessary notifications on the screen
                -- But this may be changed if it is deemed to be slower than Smart Kick
                util.yield(2000)
                local newhost = players.get_host()
                if newhost == players.user() then
                    util.toast("You are now the host")
                else
                    -- Delay here so that the notificaiton of the player becoming host is faster
                    util.yield(2000)
                    util.toast("Something bad happened, host could not be kicked. Bailing the session")
                    util.log("The host could not be kicked due to them being a modder, or you (the user) not being loaded into the session enough to correctly kick them. Report the latter as an issue if that happens often")
                    menu.trigger_commands("bealone")
                end
                
            end

        end
        if playpos >= 2 then
            util.toast("Not kicking the host as you are not the next host. Activate host token spoofing or easy host to become host")
            return
        end
    end

end

-- Could be improved for efficiency sake
function sesscheck()
    local session = util.is_session_started()
    local userpos = players.get_host_queue_position(players.user())
    local spoofref = menu.ref_by_command_name("hosttokenspoofing")
    local value = menu.get_value(spoofref)
    if value == false then
        if session == false then
            return
        else
            menu.trigger_commands("bealone")
            util.yield(2000)
            util.toast("Your changes have been successfully applied (host token spoofing is off)")
        end
    else
        if session == true then
            local playcount = PLAYER.GET_NUMBER_OF_PLAYERS()
            if playcount == 1 then
                menu.trigger_commands("gopublic")
                util.toast("Joining New Session")
                
            end
            if playcount >= 4 and userpos >= 2 then
                menu.trigger_commands("bealone")
                util.yield(2000)
                util.toast("Rejoining Previous Session")
                menu.trigger_commands("rejoin")
                kick()
            end
            if playcount == 2 then
                util.toast("There are a lack of players in the session, kicking the host would result in a session of you and 1 other player")
            end
            if playcount == 3 then
                util.toast("There are a lack of players in the session, kicking the host would result in a session of you and 2 other players")
            end
            if playcount >= 4 and userpos == 1 then
            end
        elseif session == false then
            menu.trigger_commands("gopublic")
            util.toast("Joining Online")
        end
    end
    

end

-- Could be improved to disable the ultimate version for conflict reasons
menu.toggle(my_root, "Enable/Disable Host Token Spoofing", {'hostspoof'}, "If it is already on, then do not enable this.", function(toggled)
    if toggled then
        menu.trigger_commands("hosttokenspoofing on")
        menu.trigger_commands("spoofedhosttoken 0000000000000000")
        util.toast("Spoofing On")
    else
        menu.trigger_commands("hosttokenspoofing off")
        util.toast("Spoofing Off")
    end
end)

-- Could modify to try and see if host token spoofing is off already but this may be difficult
menu.action(my_root, "Apply Changes", {'applchan'}, "This applies the host token spoofing value and activation changes but this will not do anything if there are only 2 or 3 players in the session -- Note that this will likely put you in a session by yourself if you activate this without activating host token spoofing.", function()
    util.toast("Any changes made will not revert until the 'Enable/Disable Host Token Spoofing' feature is turned on or off")
    sesscheck()

end)

menu.action(my_root, "Join Random Public Session", {''}, "This can also act as an apply changes button regardless of being in story mode or online", function()
    menu.trigger_commands("gopublic")
end)

-- Could make it slightly faster but will need testing if that is the case
menu.toggle_loop(my_root, "Kick Host When Next In Queue", {'quekick'}, "Similar to the built in Ultimate feature, this auto kicks the host when you are next in the queue. MAKE SURE YOU HAVE HOST TOKEN SPOOFING ENABLED FOR THIS TO ACTUALLY KICK THE HOST", function()
    kick()
    end, function()
        util.toast("Auto Kicking Is Now Off")
    
end)

menu.my_root():divider("")

-- Will need further testing to ensrue it is efficient, quick and does not hog any performance
local neweasy = menu.toggle(my_root, "All In One, Easy Host", {"easyhost"}, "Combines all features into one toggle but this may be less stable than the individual versions.", function(toggled)
    if toggled then

        menu.trigger_commands("hostspoof on")
        util.yield(500)
        menu.trigger_commands("quekick on")
        menu.trigger_commands("applchan")

    else
        menu.trigger_commands("hostspoof off")
        util.yield(400)
        menu.trigger_commands("quekick off")
        util.toast("If you wish to apply changes, then press 'Apply Changes'")
    end

end)


local misc = menu.list(my_root, "Misc", {''}, "")
misc:divider("Version: 3.1")
misc:hyperlink("My Github Repository - Changelog is also provided here and you can manually update the script","https://github.com/Kizzer2003/GrabHost")
misc:action("Update Script", {''}, "The script should update automatically but if it does not, this should update it", function()
    auto_updater_config.check_interval = 0
    util.toast("Checking for updates")
    auto_updater.run_auto_update(auto_updater_config)
end)
