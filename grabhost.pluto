-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, "auto-updater")
if not status then
    local auto_update_complete = nil util.toast("Installing auto-updater...", TOAST_ALL)
    async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
        function(result, headers, status_code)
            local function parse_auto_update_result(result, headers, status_code)
                local error_prefix = "Error downloading auto-updater: "
                if status_code ~= 200 then util.toast(error_prefix..status_code, TOAST_ALL) return false end
                if not result or result == "" then util.toast(error_prefix.."Found empty file.", TOAST_ALL) return false end
                filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                if file == nil then util.toast(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                file:write(result) file:close() util.toast("Successfully installed auto-updater lib", TOAST_ALL) return true
            end
            auto_update_complete = parse_auto_update_result(result, headers, status_code)
        end, function() util.toast("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
    async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
    if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
    auto_updater = require("auto-updater")
end
if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end


local auto_updater_config = {
    source_url="https://raw.githubusercontent.com/Kizzer2003/GrabHost/main/grabhost.pluto",
    script_relpath=SCRIPT_RELPATH,
    verify_file_begins_with=nil,
    check_interval=3600,
}

auto_updater.run_auto_update(auto_updater_config)

script_version = 2.3


util.keep_running()
util.require_natives(1681379138)

if not SCRIPT_SILENT_START then
    players.add_command_hook(function(pid, root)
        local LordMcNuggie = "LordMcNuggie"
        local Kizzer = "Kizzer"
        local Krisby = "KrisbySkittles"
        local Cranberry = "CrisbyCranberry"
        if pid == players.user() and players.get_name(pid) == LordMcNuggie or players.get_name(pid) == Kizzer then
            util.toast("Welcome "..players.get_name(players.user())..", Developer of NugsScript and GrabHost")
        
        elseif pid == players.user() and players.get_name(pid) == Krisby or players.get_name(pid) == Cranberry then
            util.toast("Welcome "..players.get_name(players.user())..", Sweet Girfriend of LordMcNuggie")
        end
        if pid == players.user() and players.get_name(pid) != LordMcNuggie and players.get_name(pid) != Krisby and players.get_name(pid) != Kizzer and players.get_name(pid) != Cranberry then
            util.toast("Welcome "..players.get_name(players.user()))
        end
        
        
        
    end)
    util.toast("GrabHost Version: "..script_version)
end

local my_root = menu.my_root()

players.add_command_hook(function(pid, root)
    if pid != players.user() and (players.get_name(pid) == "LordMcNuggie" or players.get_name(pid) == "__Kizzer__") then
        players.add_detection(pid, "GrabHost Developer", TOAST_DEFAULT, 1)
    end
end)


function hostspoofing(pid)
    players.add_command_hook(function(pid, root)
        if util.is_session_transition_active() then
            util.toast("Waiting to join session...")
            util.on_transition_finished(function()
                local host = players.get_host_queue_position(pid)
                if host == 0 or host == "N/A" then
                    local player = players.get_name(pid)
                    local me = players.get_host_queue_position(players.user())
                    if me == 0 or me == "N/A" then
                        util.yield()
                    else
                        if player == "__Kizzer__" or player == "LordMcNuggie" then
                            util.toast("You can't kick the developer of the script ;)")
                        elseif player == "KrisbySkittles" then
                            util.toast("You can't kick the developer's girlfriend :)")
                        else
                            util.toast("Kicking Host...")
                            util.yield(2500)
                            menu.trigger_commands("kick" .. player)
                            util.yield(2200)
                            local uhost = players.get_host_queue_position(players.user())
                            if uhost == "N/A" or uhost == 0 then
                                util.toast("If everything went to plan, you are now host :D")
                                util.yield()
                            else
                                util.toast("Something went wrong, bailing you from the session. Try joining another")
                                util.yield(500)
                                menu.trigger_commands("bealone")
                                util.yield(2600)
                                menu.trigger_commands("go public")
                                util.toast("Joining Public Session")
                            end
                        end
                    end
                end
            end)
        end
    end)
end

menu.toggle(my_root, "Easy Host", {'ehost'}, "Works with Stand Basic and Regular. Enables Host Token Spoofing, loads you into a session then kicks the host", function(toggled)
    if toggled then
        menu.trigger_commands("hosttokenspoofing on")
        menu.trigger_commands("spoofedhosttoken 0000000000000000")
        local sessionstart = util.is_session_started(false) 
        if not sessionstart then 
            hostspoofing()
            menu.trigger_commands("go public")
            util.toast("Joining Online")
        elseif sessionstart == true then
            menu.trigger_commands("bealone")
            util.toast("Leaving Session...")
            util.yield(4000)
            util.toast("Rejoining Previous Session...")
            menu.trigger_commands("rejoin")
            hostspoofing()
        end
      
    else
        menu.trigger_commands("hosttokenspoofing off")
        util.toast("Host Token Spoofing is now off! Make sure you change sessions to apply remove your spoofed host token")
    end
end)



local misc = menu.list(my_root, "Misc", {''}, "")
misc:divider("Version: 2.3")
misc:hyperlink("My Github Repository - Changelog is also provided here","https://github.com/Kizzer2003/GrabHost")
misc:action("Update Script", {''}, "The script should update automatically but if it does not, this should update it", function()
    auto_updater_config.check_interval = 0
    util.toast("Checking for updates")
    auto_updater.run_auto_update(auto_updater_config)
end)
misc:hyperlink("Manually Update Script","https://github.com/Kizzer2003/GrabHost", "The script should automatically update but if it doesn't, download the latest version from my github or the update button below")
